* Tests
** TODO connect module tests with main test, currently only test from main.rs are run on `cargo run`. Integration tests also never run :|
** to run lib.rs and all module tests run `cargo run --lib`


* pointers

** recursive Page table address translation
https://os.phil-opp.com/paging-implementation/#recursive-page-tables
** Triggering a segfault
#+begin_src rust

    //triggering a page fault
    unsafe {
        *(0xdeadbeef as *mut u64) = 42;
    }
#+end_src

* x86_64 crate

** triggering int3 (breakpoint interrupt)
   #+begin_src rust
   x86_64::instructions::interrupts::int3();
   #+end_src


** Multilevel Page Table traversal
   #+begin_src rust
    let l4_table = unsafe { active_level_4_table(phys_mem_offset) };

    for (i, pte) in l4_table.iter().enumerate() {
        if !pte.is_unused() {
            println!("L4 PageTableEntry {}:{:?}", i, pte);

            //get physical address from the PTE and convert it
            let phys = pte.frame().unwrap().start_address();
            let virt = phys.as_u64() + boot_info.physical_memory_offset;
            let ptr  = VirtAddr::new(virt).as_mut_ptr();
            let l3_table: &PageTable = unsafe { &*ptr };

            for (i, pte) in l3_table.iter().enumerate() {
                if !pte.is_unused() {
                    println!("L3 PageTableEntry {}:{:?}", i, pte);
                }
            }

        }
    }
   #+end_src


** Manual translate_addr implementation
   #+begin_src rust
     use x86_64::PhysAddr;
     fn translate_addr_inner(addr: VirtAddr, physical_memory_offset: VirtAddr) -> Option<PhysAddr> {
         use x86_64::registers::control::Cr3;
         use x86_64::structures::paging::page_table::FrameError;

         let (level_4_table_frame, _) = Cr3::read(); // read active level4 table from CR3 register
                                                     // extract indexes for 4 levels of PT from the addr (access different bits of the address)
         let table_indexes = [
             addr.p4_index(),
             addr.p3_index(),
             addr.p2_index(),
             addr.p1_index(),
         ];

         let mut frame = level_4_table_frame; // starting at level4 frame

         // iterate over levels
         for &index in &table_indexes {
             // convert physical address to virtual, by adding physical_memory_offset
             let virt = physical_memory_offset + frame.start_address().as_u64();
             let pt_ptr: *const PageTable = virt.as_ptr();
             let page_table = unsafe { &*pt_ptr };

             //get the entry for current level index
             let entry = &page_table[index];
             frame = match entry.frame() {
                 Ok(frame) => frame,
                 Err(FrameError::FrameNotPresent) => return None,
                 Err(FrameError::HugeFrame) => panic!("Huge Pages not supported!"),
             }
         }

         //finally here calculate the actual address using physical frame address and virtual address offset
         Some(frame.start_address() + u64::from(addr.page_offset()))
     }


/// This function is unsafe because the caller must guarantee that the
/// complete physical memory is mapped to virtual memory at the passed
/// `physical_memory_offset`.
pub unsafe fn translate_addr(addr: VirtAddr, physical_memory_offset: VirtAddr) -> Option<PhysAddr> {
    // using inner function to limit the scope of `unsafe fn`
    translate_addr_inner(addr, physical_memory_offset)
}

   #+end_src
